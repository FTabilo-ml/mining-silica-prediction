name: Deploy camelscl

on:
  # Ejecutarlo manualmente desde "Actions"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag to deploy (e.g., v1)'
        required: true
        default: 'v1'
  # (Opcional) disparar al pushear a main
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile.lambda'          # <-- ajusta si tu Dockerfile se llama distinto
      - 'requirements-serving.txt'
      - 'src/**'
      - 'models_release/**'

env:
  # Nombre de imagen en GHCR (usuario/org/repo)
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  # Tag proveniente de dispatch; si es push, se reemplaza mÃ¡s abajo por el short-SHA
  TAG: ${{ github.event.inputs.tag || 'latest' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write   # necesario para publicar en GHCR

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Si el trigger es push, usa el short SHA como tag
      - name: Set TAG for push
        if: ${{ github.event_name == 'push' }}
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login a GHCR con el token del repo
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.lambda   # <-- ajusta si corresponde
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
