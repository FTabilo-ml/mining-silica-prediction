name: CI

on:
  push:
    branches: [ main, master ]
    paths:
      - "src/**"
      - "dashboard/**"
      - "data/**"
      - "models/**"
      - "requirements.txt"
      - ".github/workflows/**"
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
      DATA_PATH: data/processed/train.parquet
      RESULTS_DIR: results/dashboard

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Check requirements.txt
        id: reqs
        run: |
          if [ -f requirements.txt ]; then
            echo "missing=false" >> "$GITHUB_OUTPUT"
          else
            echo "missing=true" >> "$GITHUB_OUTPUT"
            echo "WARN: requirements.txt not found; skipping pip install"
          fi

      - name: Install Python deps
        if: ${{ steps.reqs.outputs.missing != 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest ruff || true

      # (Opcional) DVC pull — solo si definiste el secreto DVC_REMOTE_URL
      - name: DVC pull (optional)
        if: ${{ and(steps.reqs.outputs.missing != 'true', secrets.DVC_REMOTE_URL != '') }}
        run: |
          pip install "dvc[all]"
          dvc remote add -f origin "${{ secrets.DVC_REMOTE_URL }}"
          # Para remotos con credenciales:
          # dvc remote modify origin --local access_key_id "${{ secrets.DVC_ACCESS_KEY }}"
          # dvc remote modify origin --local secret_access_key "${{ secrets.DVC_SECRET_KEY }}"
          dvc pull || echo "DVC pull skipped or failed (no remote?)"


      - name: Lint (ruff)
        run: |
          if command -v ruff >/dev/null 2>&1; then
            ruff --version
            # No fallar por warnings (quita '|| true' para hacerlo obligatorio)
            ruff check . || true
          else
            echo "ruff not installed; skipping"
          fi

      - name: Smoke checks (syntax & imports)
        run: |
          # Errores de sintaxis
          python -m py_compile $(git ls-files '*.py')
          # Chequeos rápidos (sin lanzar Streamlit)
          python - << 'PY'
          from pathlib import Path
          try:
              import pandas as pd  # noqa
              print("Imports OK")
          except Exception as e:
              print("WARN: import issue:", e)
          p = Path("data/processed/train.parquet")
          if p.exists():
              import pandas as pd
              df = pd.read_parquet(p)
              print("Data OK:", df.shape, "index tz:", getattr(df.index, "tz", None))
          else:
              print("WARN: dataset not found:", p)
          PY

      - name: Run tests (if present)
        run: |
          if [ -d tests ]; then
            pytest -q
          else
            echo "No tests/ directory. Skipping."
          fi

      - name: Produce dashboard snapshot (optional)
        run: |
          python - << 'PY'
          from pathlib import Path
          import pandas as pd
          models_ok = Path("models").exists()
          data_ok = Path("data/processed/train.parquet").exists()
          if models_ok and data_ok:
              out = Path("results/dashboard/last_snapshot.csv")
              out.parent.mkdir(parents=True, exist_ok=True)
              pd.DataFrame({"ok": [1]}).to_csv(out, index=False)
              print("Snapshot dummy created:", out)
          else:
              print("Skipping snapshot (missing models or data)")
          PY

      - name: Upload snapshot artifact (if exists)
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-snapshot
          path: results/dashboard/last_snapshot.csv
          if-no-files-found: ignore
